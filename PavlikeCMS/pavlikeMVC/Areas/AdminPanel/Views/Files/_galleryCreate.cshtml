@model PavlikeDATA.Models.Album
@{
    ViewBag.Title = "Galeri";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminPanelLayout.cshtml";
}

<div class="content content-narrow">
    <!-- Simple Wizards -->
    <h2 class="content-heading">Yeni Albüm Oluştur</h2>
    <div class="row">
        <div class="col-lg-12">
            <!-- Simple Classic Wizard (.js-wizard-simple class is initialized in js/pages/base_forms_wizard.js) -->
            <!-- For more examples you can check out http://vadimg.com/twitter-bootstrap-wizard-example/ -->
            <div class="js-wizard-simple block">
                <!-- Step Tabs -->
                <ul class="nav nav-tabs nav-justified">
                    <li class="active">
                        <a href="#simple-classic-step1" data-toggle="tab">1. Album Başlığı</a>
                    </li>
                    <li>
                        <a href="#simple-classic-step2" data-toggle="tab">2. Görseller</a>
                    </li>

                </ul>
                <!-- END Step Tabs -->
                <!-- Form -->
                <!-- Steps Content -->
                <div class="block-content tab-content">
                    <!-- Step 1 -->
                    <div class="tab-pane push-30-t push-50 active" id="simple-classic-step1">
                        <div class="row">
                            @using (Html.BeginForm(null, null, FormMethod.Post, new { @id = "albumForm" }))
                            {
                                @Html.AntiForgeryToken()

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                                    <div class="col-md-4">
                                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control col-md-6" } })
                                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            }

                        </div>
                    </div>

                    <div class="tab-pane push-30-t push-50" id="simple-classic-step2">

                        <div class="col-md-12">
                            <div class="block">
                                <ul class="nav nav-tabs" data-toggle="tabs">
                                    <li class="active">
                                        <a href="#btabs-animated-fade-home">Görsel Yükle</a>
                                    </li>
                                    <li class="">
                                        <a href="#btabs-animated-fade-profile">Görsel Seç</a>
                                    </li>

                                </ul>
                                <div class="block-content tab-content">


                                    <div class="tab-pane fade active in" id="btabs-animated-fade-home">
                                        <h4 class="font-w300 push-15">Görsel Yükle</h4>
                                        <form action="@Url.Action("AlbumMediaUpload")" method="post" enctype="multipart/form-data" class="dropzone" id="dropzoneForm">
                                            @Html.Hidden("AlbumId")
                                            <div class="fallback">
                                                <input name="file" type="file" multiple />
                                                <input type="submit" value="Upload" />
                                            </div>
                                        </form>

                                        <style type="text/css">
                                            .dz-max-files-reached {
                                                background-color: red;
                                            }
                                        </style>
                                    </div>



                                    <div class="tab-pane fade" id="btabs-animated-fade-profile">
                                        <h4 class="font-w300 push-15">Görsel Seç</h4>

                                        @Html.Action("_mediaList")



                                    </div>

                                </div>
                            </div>

                        </div>




                    </div>

                </div>
                <!-- END Steps Content -->
                <!-- Steps Navigation -->
                <div class="block-content block-content-mini block-content-full border-t">
                    <div class="row">
                        <div class="col-xs-6">

                        </div>
                        <div class="col-xs-6 text-right">
                            <button class="wizard-next btn btn-default" type="button">Görseller <i class="fa fa-arrow-right"></i></button>
                            <button class="wizard-finish btn btn-primary" type="submit"><i class="fa fa-check"></i> Kaydet</button>
                        </div>
                    </div>
                </div>
                <!-- END Steps Navigation -->
                <!-- END Form -->
            </div>
            <!-- END Simple Classic Wizard -->
        </div>

    </div>

</div>

<script type="text/javascript">
    
    jQuery('.js-wizard-simple').bootstrapWizard({
        'tabClass': '',
        'firstSelector': '.wizard-first',
        'previousSelector': '.wizard-prev',
        'nextSelector': '.wizard-next',
        'lastSelector': '.wizard-last',

        'onTabShow': function ($tab, $navigation, $index) {
            var $total = $navigation.find('li').length;
            var $current = $index + 1;
            var $percent = ($current / $total) * 100;

            // Get vital wizard elements
            var $wizard = $navigation.parents('.block');
            var $progress = $wizard.find('.wizard-progress > .progress-bar');
            var $btnPrev = $wizard.find('.wizard-prev');
            var $btnNext = $wizard.find('.wizard-next');
            var $btnFinish = $wizard.find('.wizard-finish');

            // Update progress bar if there is one
            if ($progress) {
                $progress.css({ width: $percent + '%' });
            }

            // If it's the last tab then hide the last button and show the finish instead
            if ($current >= $total) {
                $btnNext.hide();
                $btnFinish.show();
            } else {
                $btnNext.show();
                $btnFinish.hide();
            }
        }, 'onNext': function () {
            var devam;
            if ($("#albumForm").valid()) {
                devam = $.post("@Url.Action("_galleryCreate")", $("#albumForm").serializeArray(), function (data) {
                    if (data === "0") {
                        toastr["warning"]("Sayfayı yenileyip tekrar deneyin.");

                        return false;
                    } else {
                        $("#AlbumId").val(data);
                        return true;
                    }
                });

            } else {
                toastr["warning"]("Alanları kontrol ediniz.");
                devam = false;
            }

            return devam;
        }
    });

    //Send Data
    $(".wizard-finish").on("click", function () {
        var selected = [];
        $("select").find("option:selected").each(function () {
            selected.push($(this).val());
        });

        $.post("@Url.Action("_AlbumMediaInsert")", { medias: selected, albumId: $("#AlbumId").val() }, function (data) {
            if (data === "True") {
                window.location.replace("@Url.Action("GalleryView")" + "?id=" + $("#AlbumId").val());
            }
        });
    });


    //File Upload response from the server
    Dropzone.options.dropzoneForm = {
        acceptedFiles: "image/*",
        init: function () {
            this.on("success", function (file) {
                if (this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) {

                }
            });
            this.on("error", function (file) {

            });

        }
    };
</script>